#!/bin/bash
set -e

SCRIPT_DIR=$(cd -- $( dirname -- ${BASH_SOURCE[0]}) &> /dev/null && pwd)
DOCKER_COMPOSE_FILE=""

rebuild=false
backend=false
frontend=false

clean_up () {
    echo
    echo "stopping build and run task"
    echo "run task pid: $run_pid"
    echo "build task pid: $build_pid"
    kill -9 $build_pid $run_pid
    echo "shutting down docker containers"
    docker compose -f ${SCRIPT_DIR}/${DOCKER_COMPOSE_FILE} down
}

start_docker_containers () {
    if $rebuild;then
        echo "Rebuilding the containers..."
        docker compose -f ${SCRIPT_DIR}/${DOCKER_COMPOSE_FILE} up --build -d
    else
        docker compose -f ${SCRIPT_DIR}/${DOCKER_COMPOSE_FILE} up -d
    fi
}

start_backend ()
{
    echo "Starting Database for backend development."
    DOCKER_COMPOSE_FILE="server-docker-compose.yml"

    start_docker_containers

    cd $SCRIPT_DIR
    cd ..
    ./gradlew -t build -x check -i -q &
    build_pid=$!
    sleep 5 && { ./gradlew -Dorg.gradle.jvmargs=-Dio.ktor.development=true :server:run & run_pid=$! ; }
    wait
}

start_frontend ()
{
    echo "Starting Database and server for frontend development."
    DOCKER_COMPOSE_FILE="ui-docker-compose.yml"

    start_docker_containers

    cd $SCRIPT_DIR 
    cd ../ui
    npm run dev
}

start_development () {
    if $backend; then
        start_backend
    elif $frontend; then
        start_frontend
    fi
}

trap clean_up EXIT

while getopts 'rfbh' flag; do
    case "${flag}" in
        r)
            rebuild=true ;;
        f)
            frontend=true ;;
        b)
            backend=true ;;
        h)
            echo "-f = frontend (start db + server)"
            echo "-b = backend (start db only)"
            echo "-r = rebuild local containers"
            ;;
    esac
done

start_development
